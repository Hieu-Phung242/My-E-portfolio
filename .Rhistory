#segment trees using li2012 algorithm
segmented_plot <- segment_trees(lab5_las, li2012(dt1 = 1.5,
dt2 = 2,
R = 2,
Zu = 15,
speed_up = 10,
hmin = 2))
segmented_plots[[i]] <- segmented_plot
}
# Create a list to store the segmented plots
segmented_plots <- list()
# Segmented trees for each plot
for (i in 1:4) {
plot_name <- paste0("Lab5_Plot_", i)
las_file <- paste0("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/", plot_name, ".las")
#read las file in lab5
lab5_las <- readLAS(las_file)
#segment trees using li2012 algorithm
segmented_plot <- segment_trees(lab5_las, li2012(dt1 = 1.5,
dt2 = 2,
R = 2,
Zu = 15,
speed_up = 10,
hmin = 2))
segmented_plots[[i]] <- segmented_plot
}
# Create a list to store the segmented plots
segmented_plots <- list()
# Segmented trees for each plot
for (i in 1:4) {
plot_name <- paste0("Lab5_Plot_", i)
las_file <- paste0("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/", plot_name, ".las")
#read las file in lab5
lab5_las <- readLAS(las_file)
#segment trees using li2012 algorithm
segmented_plot <- segment_trees(lab5_las, li2012(dt1 = 1.5,
dt2 = 2,
R = 2,
Zu = 15,
speed_up = 10,
hmin = 2))
segmented_plots[[i]] <- segmented_plot
}
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
plot(Lab5_Plot_1, color = "treeID")  # This colors trees distinctly
plot(segmented_plots_1, color = "treeID")  # This colors trees distinctly
plot(segmented_plot_1, color = "treeID")  # This colors trees distinctly
plot(segmented_plots1, color = "treeID")  # This colors trees distinctly
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
# Save the interactive plot as an HTML file
rglwidget <- rglwidget()
saveWidget(rglwidget, file = "interactive_plot.html", selfcontained = TRUE)
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
# Save the interactive plot as an HTML file
rglwidget <- rglwidget()
saveWidget(rglwidget, file = "interactive_plot.html", selfcontained = TRUE)
# Using Dalponte and Coomes 2016 algorithm to detect individual trees
tree_crowns_plot1 <- segment_trees(Lab5_Plot_1, dalponte2016(chm_plot1,
tree_tops,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
plot(tree_crowns_plot1, color = "treeID")
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
# Create CHM for plot 1 using pitfree algorithm
chm_plot1 <- rasterize_canopy(Lab5_Plot_1,
res = 0.5,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0, 1)))
# Plot the CHM
plot(chm_plot1, main = "CHM - Plot 1")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
library(htmlwidgets)
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
# Plot each segmented plot colored by Tree ID
for (i in 1:4) {
plot(segmented_plots[[i]], color = "treeID", main = paste("Plot", i))
}
# Create a list to store the segmented plots
segmented_plots <- list()
# Segmented trees for each plot
for (i in 1:4) {
plot_name <- paste0("Lab5_Plot_", i)
las_file <- paste0("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/", plot_name, ".las")
#read las file in lab5
lab5_las <- readLAS(las_file)
#segment trees using li2012 algorithm
segmented_plot <- segment_trees(lab5_las, li2012(dt1 = 1.5,
dt2 = 2,
R = 2,
Zu = 15,
speed_up = 10,
hmin = 2))
segmented_plots[[i]] <- segmented_plot
}
library(lidR)
library(terra)
library(tidyverse)
library(rgl)
# Read normalized .las file into catalog for further processing
norm_cat_mkrf <- readLAScatalog("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 2/L2_data/Data/Normalized")
# Filter the points with height below 0m and above 65m
opt_filter(norm_cat_mkrf) <- '-drop_z_below 0 -drop_z_above 65'
# Extract specific plot
lab5_plot_table <- read.csv("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/lab5_Plots.csv")
#define the radius
radius <- 154
#use for loop to extract the plots
for (i in 1:nrow(lab5_plot_table)){
lab5_plot_cent <- c(lab5_plot_table$X[i], lab5_plot_table$Y[i]) #extract plot center coordinates
plot_las <- clip_circle(norm_cat_mkrf, lab5_plot_cent[1], lab5_plot_cent[2], radius) #clip plot from norm_cat_mkrf
output_file <- paste("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_",
i, ".las", sep = "") #output directory as string
writeLAS(assign(paste("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_",
i, sep = ""), plot_las), output_file) #write'MKRF_Plot_i' to output dir.
}
# Explore the plots
Lab5_Plot_1 <- readLAS("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_1.las")
Lab5_Plot_2 <- readLAS("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_2.las")
Lab5_Plot_3 <- readLAS("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_3.las")
Lab5_Plot_4 <- readLAS("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/Lab5_Plot_4.las")
# Create a list to store the segmented plots
segmented_plots <- list()
# Segmented trees for each plot
for (i in 1:4) {
plot_name <- paste0("Lab5_Plot_", i)
las_file <- paste0("C:/Users/hphung.stu/Downloads/GEM521/Labs/Lab 5/Data/Lab5_Plots/", plot_name, ".las")
#read las file in lab5
lab5_las <- readLAS(las_file)
#segment trees using li2012 algorithm
segmented_plot <- segment_trees(lab5_las, li2012(dt1 = 1.5,
dt2 = 2,
R = 2,
Zu = 15,
speed_up = 10,
hmin = 2))
segmented_plots[[i]] <- segmented_plot
}
# Plot each segmented plot colored by Tree ID
for (i in 1:4) {
plot(segmented_plots[[i]], color = "treeID", main = paste("Plot", i))
}
library(htmlwidgets)
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
# Save the interactive plot as an HTML file
rglwidget <- rglwidget()
saveWidget(rglwidget, file = "interactive_plot.html", selfcontained = TRUE)
# Create CHM for plot 1 using pitfree algorithm
chm_plot1 <- rasterize_canopy(Lab5_Plot_1,
res = 0.5,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0, 1)))
# Plot the CHM
plot(chm_plot1, main = "CHM - Plot 1")
# Locate tree tops using lmf algorithm
tree_tops <- locate_trees(chm_plot1,
lmf(ws = 5, hmin = 2))
# Plot CHM
plot(chm_plot1, main = "Tree Top Detection - Plot 1")
# Overlay detected tree tops in red
plot(tree_tops, add = TRUE, col = "red", pch = 20)
# Using Dalponte and Coomes 2016 algorithm to detect individual trees
tree_crowns_plot1 <- segment_trees(Lab5_Plot_1, dalponte2016(chm_plot1,
tree_tops,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
plot(tree_crowns_plot1, color = "treeID")
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
library(htmlwidgets)
plot(segmented_plots[[1]], color = "treeID")  # This colors trees distinctly
# Save the interactive plot as an HTML file
rglwidget <- rglwidget()
saveWidget(rglwidget, file = "interactive_plot.html", selfcontained = TRUE)
# Using Dalponte and Coomes 2016 algorithm to detect individual trees
tree_crowns_plot1 <- segment_trees(Lab5_Plot_1, dalponte2016(chm_plot1,
tree_tops,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
plot(tree_crowns_plot1, color = "treeID")
```{html}
# Ensure segmented_plots exists
if (!exists("segmented_plots") || length(segmented_plots) == 0) {
stop("Error: segmented_plots is empty or not defined")
}
library(htmlwidgets)
# Open a 3D rendering window
open3d()
plot(segmented_plots[[1]], color = "treeID")  # Plot 1 using Li et al., 2012
# Convert the 3D plot to an HTML widget
rglwidget_obj <- rglwidget()
# Save the interactive plot as an HTML file
saveWidget(rglwidget_obj, file = "interactive_plot_li.html", selfcontained = TRUE)
# ✅ Check if segmented_plots exists and contains data
if (!exists("segmented_plots") || length(segmented_plots) == 0 || is.null(segmented_plots[[1]])) {
stop("Error: segmented_plots is empty or NULL. Check segmentation process.")
}
# ✅ Check if segmented_plots exists and contains data
if (!exists("segmented_plots") || length(segmented_plots) == 0 || is.null(segmented_plots[[2]])) {
stop("Error: segmented_plots is empty or NULL. Check segmentation process.")
}
# ✅ Check if segmented_plots exists and contains data
if (!exists("segmented_plots") || length(segmented_plots) == 0 || is.null(segmented_plots[[0]])) {
stop("Error: segmented_plots is empty or NULL. Check segmentation process.")
}
# ✅ Check if segmented_plots exists and contains data
if (!exists("segmented_plots") || length(segmented_plots) == 0 || is.null(segmented_plots[[1]])) {
stop("Error: segmented_plots is empty or NULL. Check segmentation process.")
}
# Check if segmented_plots exists and contains data
if (!exists("segmented_plots") || length(segmented_plots) == 0 || is.null(segmented_plots[[1]])) {
stop("Error: segmented_plots is empty or NULL. Check segmentation process.")
}
open3d()
plot(segmented_plots[[1]], color = "treeID")
# Now test the interactive widget
test_widget <- rglwidget()
print(test_widget)  # If this prints, rglwidget() is working
library(htmlwidgets)
# Open a 3D rendering window
open3d()
plot(segmented_plots[[1]], color = "treeID")  # Plot 1 using Li et al., 2012
# Convert the 3D plot to an HTML widget
rglwidget_obj <- rglwidget()
# Save the interactive plot as an HTML file
saveWidget(rglwidget_obj, file = "interactive_plot_li.html", selfcontained = TRUE)
quarto render
library(htmlwidgets)
# Open a 3D rendering window
open3d()
plot(segmented_plots[[1]], color = "treeID")  # Plot 1 using Li et al., 2012
# Convert the 3D plot to an HTML widget
rglwidget_obj <- rglwidget()
# Save the interactive plot as an HTML file
saveWidget(rglwidget_obj, file = "interactive_plot_li.html", selfcontained = TRUE)
print("Interactive plot successfully saved!")
library(htmlwidgets)
# Open a 3D rendering window for Li et al.2012
open3d()
plot(segmented_plots[[1]], color = "treeID")
rglwidget_obj_1 <- rglwidget()
saveWidget(rglwidget_obj_1, file = "interactive_plot_li.html", selfcontained = TRUE)
# Open a 3D rendering window for Dalponte and Coomes, 2016
open3d()
plot(tree_crowns_plot1, color = "treeID")
rglwidget_obj_2 <- rglwidget()
saveWidget(rglwidget_obj_2, file = "interactive_plot_dalponte.html", selfcontained = TRUE)
library(htmlwidgets)
# Open a 3D rendering window for Li et al.2012
open3d()
plot(segmented_plots[[1]], color = "treeID")
rglwidget_obj_1 <- rglwidget()
saveWidget(rglwidget_obj_1, file = "interactive_plot_li.html", selfcontained = TRUE)
# Open a 3D rendering window for Dalponte and Coomes, 2016
open3d()
plot(tree_crowns_plot1, color = "treeID")
rglwidget_obj_2 <- rglwidget()
saveWidget(rglwidget_obj_2, file = "interactive_plot_dalponte.html", selfcontained = TRUE)
https://your-github-username.github.io/your-repo-name/interactive_plot_li.html
library(htmlwidgets)
# Open a 3D rendering window for Li et al.2012
open3d()
plot(segmented_plots[[1]], color = "treeID")
rglwidget_obj_1 <- rglwidget()
saveWidget(rglwidget_obj_1, file = "interactive_plot_li.html", selfcontained = TRUE)
# Open a 3D rendering window for Dalponte and Coomes, 2016
open3d()
plot(tree_crowns_plot1, color = "treeID")
rglwidget_obj_2 <- rglwidget()
saveWidget(rglwidget_obj_2, file = "interactive_plot_dalponte.html", selfcontained = TRUE)
# Using Dalponte and Coomes 2016 algorithm to detect individual trees
tree_crowns_plot1 <- segment_trees(Lab5_Plot_1, dalponte2016(chm_plot1,
tree_tops,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
plot(tree_crowns_plot1, color = "treeID")
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Set up a 2x2 plotting layout
par(mfrow = c(2,2))
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
# Set up a 2x2 plotting layout
par(mfrow = c(2,2))
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
# Set up a 2x2 plotting layout
par(mfrow = c(2,2))
# Define resolution
resolutions <- c(0.5, 2, 4, 10)
# Create empty lists to store results
chm_list_plot2 <- list()
tree_tops_list_plot2 <- list()
tree_crowns_list_plot2 <- list()
# Set up a 2x2 plotting layout
par(mfrow = c(2,2))
# Performing loop through each resolution
for (res in resolutions) {
# create CHM using pitfree algorithm
chm_plot2 <- rasterize_canopy(Lab5_Plot_2,
res = res,
algorithm = pitfree(thresholds = c(0, 10, 20, 30),
subcircle = 0.2,
max_edge = c(0,1)))
# store the CHM to the chm_list_plot2
chm_list_plot2[[as.character(res)]] <- chm_plot2
# locate tree tops using lmf algorithm
tree_tops_plot2 <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2))
# store the tree tops to the tree_tops_list_plot2
tree_tops_list_plot2[[as.character(res)]] <- tree_tops_plot2
# perform tree segmentation using Dalponte and Coomes (2016) algorithm
tree_crowns_plot2 <- segment_trees(Lab5_Plot_2,
dalponte2016(chm_plot2,
tree_tops_plot2,
th_tree = 2,
th_seed = 0.45,
th_cr = 0.55,
max_cr = 10,
ID = "treeID"))
# store segment tree crowns to the tree_crown_list_plot2
tree_crowns_list_plot2[[as.character(res)]] <- tree_crowns_plot2
# plot CHM and tree segmentation
plot(chm_plot2, main = paste("CHM Plot 2(", res, "m)", sep = ""))
plot(tree_crowns_plot2, main = paste("Tree Segmentation Plot 2 (", res, "m)", sep = ""), color = "treeID")
}
for (res in resolutions) {
plot(tree_tops_plot2, add = TRUE, col = "red")
}
![Forest Canopy](images/forest_canopy.png)
source("~/.active-rstudio-document", echo=TRUE)
